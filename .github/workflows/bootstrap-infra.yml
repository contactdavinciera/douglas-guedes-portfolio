name: Bootstrap Infra & CI/CD

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create files
        run: |
          set -euo pipefail
          mkdir -p .github/workflows functions/api/stream color-studio-backend/scripts

          cat > render.yaml <<'RYAML'
version: 1
envVarGroups:
  - name: app-shared-env
services:
  - type: web
    name: dg-portfolio-backend
    env: docker
    plan: standard
    branch: main
    region: oregon
    repo: https://github.com/contactdavinciera/douglas-guedes-portfolio
    dockerCommand: ""  # usa CMD do seu Dockerfile
    envVars:
      - fromGroup: app-shared-env
      - key: FLASK_ENV
        value: production
    healthCheckPath: /healthz
    autoDeploy: true
    postDeployCommand: |
      python color-studio-backend/scripts/bootstrap_db.py || echo "bootstrap_db skipped"
    pullRequestPreviewsEnabled: true
    previewPlan: starter
    previewEnvVars:
      - fromGroup: app-shared-env
      - key: FLASK_ENV
        value: development
  - type: cron
    name: dg-portfolio-maintenance
    env: docker
    schedule: "0 3 * * *"
    branch: main
    repo: https://github.com/contactdavinciera/douglas-guedes-portfolio
    dockerCommand: "python color-studio-backend/scripts/cron_task.py"
    envVars:
      - fromGroup: app-shared-env
    pullRequestPreviewsEnabled: true
    previewPlan: starter
    previewEnvVars:
      - fromGroup: app-shared-env
RYAML

          cat > .github/workflows/deploy-prod.yml <<'WPROD'
name: Deploy - Production
on:
  push:
    branches: [ "main" ]
jobs:
  prod_pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install (frontend)
        run: |
          if [ -f package.json ]; then
            pnpm install --frozen-lockfile || pnpm install
          fi
      - name: Test (frontend)
        run: pnpm test --if-present
      - name: Trigger Cloudflare Pages Deploy Hook (Production)
        env:
          CF_PAGES_DEPLOY_HOOK: ${{ secrets.CF_PAGES_DEPLOY_HOOK }}
        run: |
          if [ -n "${CF_PAGES_DEPLOY_HOOK}" ]; then
            curl -sS -X POST "${CF_PAGES_DEPLOY_HOOK}"
          else
            echo "CF_PAGES_DEPLOY_HOOK not set; skipping"
          fi
WPROD

          cat > .github/workflows/deploy-preview.yml <<'WPREV'
name: Preview - PR checks
on:
  pull_request:
    branches: [ "main" ]
jobs:
  preview_checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install (frontend)
        run: |
          if [ -f package.json ]; then
            pnpm install --frozen-lockfile || pnpm install
          fi
      - name: Test (frontend)
        run: pnpm test --if-present
WPREV

          cat > functions/api/stream/upload.ts <<'UPLOAD'
export const onRequestPost: PagesFunction<{
  STREAM_TOKEN?: string;
  CLOUDFLARE_ACCOUNT_ID: string;
}> = async (context) => {
  const { env } = context;
  const accountId = env.CLOUDFLARE_ACCOUNT_ID;
  const token = env.STREAM_TOKEN;
  if (!accountId || !token) {
    return new Response("Missing Stream credentials", { status: 500 });
  }
  const res = await fetch(
    `https://api.cloudflare.com/client/v4/accounts/${accountId}/stream/direct_upload`,
    {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        maxDurationSeconds: 3600,
        allowedOrigins: ["*"],
      }),
    }
  );
  const data = await res.json();
  if (!res.ok) {
    return new Response(JSON.stringify(data), { status: res.status });
  }
  return new Response(JSON.stringify(data), {
    status: 200,
    headers: { "Content-Type": "application/json" },
  });
};
UPLOAD

          cat > color-studio-backend/scripts/bootstrap_db.py <<'BOOT'
# Garante que o schema existe chamando db.create_all()
# Requer que seu app Flask exponha `app` e seu módulo DB exponha `db`.
import os
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    print("DATABASE_URL não setada; pulando bootstrap")
    raise SystemExit(0)
try:
    # ajuste esses imports se a sua estrutura for diferente
    from color_studio_backend.src.app import app
    from color_studio_backend.src.database import db
except Exception as e:
    print("Não consegui importar app/db:", e)
    raise SystemExit(0)
with app.app_context():
    try:
        db.create_all()
        print("DB bootstrap completo.")
    except Exception as e:
        print("Erro no bootstrap do DB:", e)
BOOT

          echo "print('maintenance cron: OK')" > color-studio-backend/scripts/cron_task.py

          cat > README-SETUP.md <<'READM'
# Infra & CI/CD automáticos (Douglas Guedes Portfolio)

## O que já entra no PR
- `render.yaml` (Render com Docker: web + cron + previews)
- Workflows GitHub (PR/Preview + Produção)
- Função `functions/api/stream/upload.ts` (Cloudflare Stream direct upload)
- Script `bootstrap_db.py` (cria tabelas no Neon sem Alembic)

## Depois do merge: 3 segredos (1x)
GitHub → Settings → Secrets → Actions:
- `CF_PAGES_DEPLOY_HOOK` (Cloudflare Pages)
- `CLOUDFLARE_ACCOUNT_ID`
- `CLOUDFLARE_API_TOKEN`

Cloudflare Pages → Env Vars (Production/Preview):
- `STREAM_TOKEN` (ou `STREAM_SIGNING_KEY`)
- (opcional) `DATABASE_URL` se precisar em Functions

Render → Environment Group `app-shared-env`:
- `DATABASE_URL` (produção)
- (preview) defina override de staging ou ative Neon branch-por-PR

Fluxo:
- PR → Preview no Render + Pages
- main → Deploy produção no Pages; Render auto-deploy
READM

      - name: Open PR with all files
        uses: peter-evans/create-pull-request@v6
        with:
          branch: automate/cicd-setup
          title: "Bootstrap: Infra & CI/CD automáticos"
          body: |
            Este PR adiciona:
            - render.yaml (Render Docker, Previews por PR, cron)
            - Workflows de PR/Preview e Produção (pnpm)
            - Função do Cloudflare Stream (direct upload)
            - Bootstrap do DB (create_all)
            - README-SETUP
          commit-message: "chore: bootstrap infra & ci/cd"
          delete-branch: true
